import java.util.*;

public class Sem4 {
    public static void main(String[] args) {
//        ListTime();
//        textnum();
//        tas3();
        task4();
    }
//        <aside>
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//        1) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ ArrayList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//
//        2) –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤ LinkedList –¥–æ–±–∞–≤—è—Ç—Å—è 10000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°—Ä–∞–≤–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.
//
//                </aside>

    static void ListTime() {
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new LinkedList<>();

        long start = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            list1.add(0, i);
        }
        long middle = System.currentTimeMillis();
        for (int i = 0; i < 1000000; i++) {
            list2.add(0, i);
        }
        long finish = System.currentTimeMillis();
        System.out.println(middle - start);
        System.out.println(finish - middle);
    }

//    <aside>
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//    –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
//
//            1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞
//
//    text~num
//
//            2. –ù—É–∂–Ω–æ —Ä–∞—Å—Å–ø–ª–∏—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ ~, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å text –≤ —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é num.
//            3. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print~num, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ num –≤ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ —É–¥–∞–ª—è–µ—Ç –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞.
//</aside>

    static void textnum() {
        List<String> list = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean work = true;
        while (work) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ");
            String line = scanner.nextLine();
            String[] arr = line.split("~");
            String text = arr[0];
            int num = Integer.parseInt(arr[1]);
            switch (text) {
                case "print":
                    System.out.println(list.remove(num));
                    break;
                case "exit":
                    System.out.println("–î–æ –≤—Å—Ç—Ä–µ—á–∏!");
                    work = false;
                    break;
                default:
                    list.add(num, text);
            }
        }
    }


//    <aside>
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//    –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
//
//      1. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ‚Äú–∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç‚Äù —Å—Ç—Ä–æ–∫–∏.
//      2. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ print, –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–≤–µ–¥–µ–Ω–Ω–∞—è –±—ã–ª–∞ –ø–µ—Ä–≤–æ–π –≤ —Å–ø–∏—Å–∫–µ, –∞ –ø–µ—Ä–≤–∞—è - –ø–æ—Å–ª–µ–¥–Ω–µ–π.
//      3. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ revert, —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏.
//</aside>

    static void tas3() {
        List<String> list = new LinkedList<>();
        Scanner scanner = new Scanner(System.in);
        boolean work = true;
        while (work) {
            System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ");
            String line = scanner.nextLine();
            switch (line) {
                case "print":
                    for (int i = list.size() - 1; i >= 0; i--) {
                        System.out.println(list.get(i));
                    }
                    break;
                case "exit":
                    System.out.println("–î–æ –≤—Å—Ç—Ä–µ—á–∏!");
                    work = false;
                    break;
                case "revert":
                    list.removeLast();
                default:
                    list.add(line);
            }
        }
    }


//<aside>
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//    1) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å—Ç—ç–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—ç–∫–∞.
//
//    2) –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –∫–æ–Ω—Å–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏.
//
//</aside>

    static void task4() {
        Stack<Integer> stack = new Stack<>();
        Queue<Integer> queue = new LinkedList<>();
        Integer[] arr = {1, 2, 4, 5, 7, 8, 9};
        for (int i = 0; i < arr.length; i++) {
            stack.push((arr[i]));
            queue.add(arr[i]);
        }
        System.out.println(stack);
        System.out.println(queue);
        for (int i = 0; i < stack.size() ; i++) {
            System.out.println(stack.pop());
        }
        System.out.println();
        for (int i = 0; i < queue.size(); i++) {
            System.out.println(queue.poll());
        }
    }
}
